type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = post("/stats", "").send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_PASSWORD_MESSAGE)
                    .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = post("/stats", requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                    .value("current_income", currentIncome)
                    .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", token
                ))
            ).send();

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 7)
                            .value("column", 4)
                            .value("price", 8)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "7",
                    "column", "4"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 7)
                                .value("column", 4)
                                .value("price", 8)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(1, 10, 80),
            this::testPurchaseAnotherTicket,
            () -> testStats(2, 18, 79),
            this::returnTicket,
            () -> testStats(1, 10, 80),
        };
    }
  learner_created: false
- name: src/cinema/StoreTicket.java
  visible: true
  text: |
    package cinema;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.UUID;

    public class StoreTicket {
        private List<BookTicket> bookTickets = new ArrayList<>();
        private CinemaRoom cinemaRoom;

        public StoreTicket(CinemaRoom cinemaRoom) {
            this.cinemaRoom = cinemaRoom;
            buildTicket();
        }

        public List<BookTicket> getBookTickets() {
            return bookTickets;
        }

        private void buildTicket() {
            cinemaRoom.getAvailable_seats().forEach(
                    seat -> {
                        UUID uuid = UUID.randomUUID();
                        bookTickets.add(new BookTicket(uuid,
                               new Ticket( seat.getRow(), seat.getColumn(), seat.getPrice()))
                        );
                    }
            );
        }
    }
  learner_created: true
- name: src/cinema/Ticket.java
  visible: true
  text: |
    package cinema;

    import com.fasterxml.jackson.annotation.JsonRootName;
    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    @JsonRootName("returned_ticket")
    public class Ticket {
        private int row;
        private int column;
        private int price;
    }
  learner_created: true
- name: src/cinema/Seat.java
  visible: true
  text: |
    package cinema;

    public class Seat {

        private int row;
        private int column;
        private int price;

        public Seat() {};

        public Seat(int row, int column) {
            this.row = row;
            this.column = column;
        }

        public Seat(int row, int column, int price) {
            this.row = row;
            this.column = column;
            this.price = price;
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public int getPrice() {
            return price;
        }

        public void setRowPrice() {
            if (row <= 4) price = 10;
            else price = 8;
        }

        @Override
        public String toString() {
            return "{" + "row: " + row + ", column: " + column + ", price " + price + "}";
        }
    }
  learner_created: true
- name: src/cinema/CinemaRoomService.java
  visible: true
  text: |
    package cinema;

    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.stereotype.Service;
    import org.springframework.web.server.ResponseStatusException;

    import java.util.List;
    import java.util.Objects;
    import java.util.Optional;

    @Service
    public class CinemaRoomService implements ICinemaRoomService {

        CinemaRoom cinemaRoom = new CinemaRoom(9, 9);
        StoreTicket storeTicket = new StoreTicket(cinemaRoom);

        @Override
        public CinemaRoom getCinema() {
            return cinemaRoom;
        }

        @Override
        public ResponseEntity bookSeat(Seat seat) {

            if (seat.getRow() <= 0 || seat.getRow() > 9 || seat.getColumn() <= 0 || seat.getColumn() > 9) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The number of a row or a column is out of bounds!" );
            }

            Optional<Seat> seatOptional = cinemaRoom.getAvailable_seats().stream()
                    .filter(seat1 -> seat1.getRow() == seat.getRow() && seat1.getColumn() == seat.getColumn())
                    .findFirst();

            if (seatOptional.isEmpty()) {
                throw new BadResponse("The ticket has been already purchased!");
    //            return ResponseEntity.badRequest().body(badResponse);
                //throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The ticket has been already purchased!");
            }

            Optional<BookTicket> bookTicket1 = storeTicket.getBookTickets()
                    .stream()
                    .filter(bookTicket -> bookTicket.getTicket().getRow() == seatOptional.get().getRow() && bookTicket.getTicket().getColumn() == seatOptional.get().getColumn())
                    .findFirst();

    //        if(bookTicket1.isEmpty()) {
    //            BadResponse badResponse = new BadResponse("The ticket has been already purchased!");
    //            return new ResponseEntity<>(badResponse, HttpStatus.BAD_REQUEST);
    //        }
    //                .orElseThrow(() -> new ResponseStatusException(HttpStatus.BAD_REQUEST, "The ticket has been already purchased!"));

            cinemaRoom.getAvailable_seats().removeIf(seat1 -> seat1.getRow() == seat.getRow() && seat1.getColumn() == seat.getColumn());

            return ResponseEntity.ok(bookTicket1);
        }

        @Override
        public Ticket returnedTicket(Token token) {
            Ticket ticket = storeTicket.getBookTickets()
                    .stream()
                    .filter(bTicket -> Objects.equals(bTicket.getToken(), token.getToken()))
                    .findFirst()
                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.BAD_REQUEST, "Wrong token!"))
                    .getTicket();

            storeTicket.getBookTickets().removeIf(bookTicket -> bookTicket.getTicket().getRow() == ticket.getRow() && bookTicket.getTicket().getColumn() == ticket.getColumn());

            return ticket;
        }

    //    @Override
    //    public List<BookTicket> bbTickect() {
    //        return storeTicket.getBookTickets();
    //    }
    }
  learner_created: true
- name: src/cinema/CRController.java
  visible: true
  text: |
    package cinema;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.MediaType;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RestController;
    import org.springframework.web.bind.annotation.RequestBody;

    import java.util.List;

    @RestController
    public class CRController {

        private ICinemaRoomService cinemaRoomService;

        @Autowired
        public CRController(ICinemaRoomService cinemaRoomService) {
            this.cinemaRoomService = cinemaRoomService;
        }

        @GetMapping(path = "/seats")
        public CinemaRoom getCinema() {
            return cinemaRoomService.getCinema();
        }

        @PostMapping(value = "/purchase")
        public ResponseEntity<?> bookSeat(@RequestBody Seat seat) {
            return cinemaRoomService.bookSeat(seat);
        }

        @PostMapping("/return")
        public Ticket returnedTicket(@RequestBody Token token) {
            return cinemaRoomService.returnedTicket(token);
        }

    //    @GetMapping("s")
    //    public List<BookTicket> bbTickect(){
    //        return cinemaRoomService.bbTickect();
    //    }
    }
  learner_created: true
- name: src/cinema/Token.java
  visible: true
  text: |
    package cinema;

    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    import java.util.UUID;

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    public class Token {
        private UUID token;
    }
  learner_created: true
- name: src/cinema/BookTicket.java
  visible: true
  text: |
    package cinema;

    import lombok.AllArgsConstructor;
    import lombok.Builder;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    import java.util.UUID;

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    @Builder
    public class BookTicket {
        private UUID token;
        private Ticket ticket;
    }
  learner_created: true
- name: src/cinema/ICinemaRoomService.java
  visible: true
  text: |
    package cinema;

    import org.springframework.http.ResponseEntity;

    public interface ICinemaRoomService {

        /**
         * provide all the availble seats in the cinema room
         * @return CinemaRoom
         */
        CinemaRoom getCinema();

        /**
         * provide the response from the request
         * @param seat seat requested
         * @return
         */
        ResponseEntity<?> bookSeat(Seat seat);

        /**
         *
         * @return
         */
        Ticket returnedTicket(Token token);
    }
  learner_created: true
- name: src/cinema/CinemaRoom.java
  visible: true
  text: |
    package cinema;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.UUID;

    public class CinemaRoom {
        private int total_rows;
        private int total_columns;
        private List<Seat> available_seats;

        public CinemaRoom(int total_rows, int total_columns) {
            this.total_rows = total_rows;
            this.total_columns = total_columns;

            available_seats = new ArrayList<>();
            setAvailable_seats();
        }

        private void setAvailable_seats() {
            if (total_columns == 0 && total_rows == 0) return;
            for (int i = 0; i < total_rows; i++) {
                for (int j = 0; j < total_columns; j++) {
                    UUID token = UUID.randomUUID();
                    Seat seat = new Seat(i + 1, j + 1);
                    seat.setRowPrice();
                    available_seats.add(seat);
                }
            }
        }

        public int getTotal_rows() {
            return total_rows;
        }

        public void setTotal_rows(int total_rows) {
            this.total_rows = total_rows;
        }

        public int getTotal_columns() {
            return total_columns;
        }

        public void setTotal_columns(int total_columns) {
            this.total_columns = total_columns;
        }

        public List<Seat> getAvailable_seats() {
            return available_seats;
        }

        @Override
        public String toString() {
            return "CinemaRoom{" +
                    "total_rows=" + total_rows +
                    ", total_columns=" + total_columns +
                    ", available_seats=" + available_seats +
                    '}';
        }
    }
  learner_created: true
- name: src/cinema/ResponseTicket.java
  visible: true
  learner_created: true
- name: src/cinema/Statistics.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13378#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 28 May 2022 03:12:53 UTC
record: 4
